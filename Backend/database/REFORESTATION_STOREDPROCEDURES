/*****Save new reforestation project*****/
CREATE FUNCTION insertProject(
	"name" VARCHAR(128),
	"size" DECIMAL,
	"country" VARCHAR(20),
	"startdate" DATE,
	"updated" DATE,
	"status" VARCHAR(15),
	"lat" VARCHAR(32),
	"lng" VARCHAR(32),
	"user_id" VARCHAR(50)
)
	RETURNS INTEGER
	LANGUAGE plpgsql AS
$func$
DECLARE idProject INTEGER;
BEGIN
	INSERT INTO refoProjects(name,size,country,startDate,updated,status,lat,lng,user_id)
	VALUES(name,size,country,startdate,updated,status,lat,lng,user_id)
	RETURNING project_id INTO idProject;
	RETURN idProject;
END
$func$;
/*SELECT insertProject('edwef',1232,'cr','2022-05-11','22-05-12','Finished',22.74726627215761,'-98.09644841660109',1)*/

/*****Get all reforestation projects*****/
CREATE FUNCTION getAllProjects("userid" VARCHAR(50))
	RETURNS TABLE("project_id" INTEGER,"name" VARCHAR(128),"size" VARCHAR(64), "country" VARCHAR(20), "startDate" VARCHAR(20),"updated" VARCHAR(20), "status" VARCHAR(15), "lat" VARCHAR(32),"lng" VARCHAR(32), "user_id" VARCHAR(50))
	LANGUAGE plpgsql AS
$func$
#variable_conflict use_column
BEGIN
	RETURN QUERY
		SELECT project_id,name,size::VARCHAR(64),country,startDate::VARCHAR(20),updated::VARCHAR(20),status,lat,lng,user_id
		FROM refoProjects 
		WHERE user_id = userid;
END
$func$;
/*select * from getAllProjects([user_id]);*/

/*****Delete a project*****/
CREATE FUNCTION deleteProject("projectid" INTEGER)
	RETURNS BOOLEAN
	LANGUAGE plpgsql AS
$func$
BEGIN
	DELETE FROM refoProjects
	WHERE project_id::INTEGER = projectid;
	RETURN FOUND;
END
$func$
/*select deleteProject([project_id]);*/

/*****Update a project*****/
CREATE FUNCTION updateProject(
	p_name VARCHAR(128),
	p_size DECIMAL,
	p_country VARCHAR(20),
	p_startdate DATE,
	p_updated DATE,
	p_status VARCHAR(15),
	p_latitude VARCHAR(32),
	p_longitude VARCHAR(32),
	p_projectid INTEGER
)
	RETURNS BOOLEAN
	LANGUAGE plpgsql AS
$func$
#variable_conflict use_column
BEGIN
	UPDATE refoProjects
	SET
		name = p_name,
		size = p_size,
		country = p_country,
		startdate = p_startdate,
		updated = p_updated,
		status = p_status,
		lat = p_latitude,
		lng = p_longitude
	WHERE
		project_id::INTEGER = p_projectid;
	RETURN FOUND;
END
$func$;
/*select updateProject('nombreTest2',321,'mx','2020-01-01','2022-02-02','finished',1);*/


/*****Save new project tracing*****/

CREATE FUNCTION insertProjectTracing(
	date DATE,
	terrainType VARCHAR(64),
	reforestedArea DECIMAL,
	terrainElevation SMALLINT,
	ecosystem VARCHAR(64),
	reforestedSpecies VARCHAR(264),
	soilHumidity DECIMAL,
	soilDepth DECIMAL,
	notes VARCHAR(264),
	projectid INTEGER
)
	RETURNS INTEGER
	LANGUAGE plpgsql AS
$func$
DECLARE val INTEGER;
BEGIN
	INSERT INTO projectTracing(date,terrainType,reforestedArea,terrainElevation,ecosystem,reforestedSpecies,soilHumidity,soilDepth,notes,project_id)
	VALUES(date,terrainType,reforestedArea,terrainElevation,ecosystem,reforestedSpecies,soilHumidity,soilDepth,notes,projectid)
	RETURNING "tracing_id" INTO val;
	RETURN val;
END;
$func$;
/*SELECT insertProjectTracing('01-01-2022','a','3.4','4','gtrgr','5.4','34','notess',1)*/
/*SELECT insertProjectTracing([params])*/

CREATE FUNCTION getAllProjectTracing("projectid" INTEGER)
	RETURNS TABLE("tracing_id" INTEGER,"date" VARCHAR(20),"terrainType" VARCHAR(64), "reforestedArea" VARCHAR(64), "terrainElevation" INT,"ecosystem" VARCHAR(64),"reforestedSpecies" VARCHAR(264), "soilHumidity" VARCHAR(64),"soilDepth" VARCHAR(64),"notes" VARCHAR(264),"project_id" INTEGER,"name" VARCHAR(128))
	LANGUAGE plpgsql AS
$func$
#variable_conflict use_column
BEGIN
	RETURN QUERY
		SELECT tracing_id,date::VARCHAR(20),terrainType,reforestedArea::VARCHAR(64),terrainElevation,ecosystem,reforestedSpecies,soilHumidity::VARCHAR(64),soilDepth::VARCHAR(64),notes,projectTracing.project_id,name
		FROM projectTracing INNER JOIN refoProjects ON projectTracing.project_id=refoProjects.project_id
		WHERE projectTracing.project_id::INTEGER = projectid;
END
$func$;
/*select * from getAllProjectTracing([project_id]);*/

/*****Delete a project tracing*****/
CREATE FUNCTION deleteProjectTracing("tracingid" INTEGER)
	RETURNS BOOLEAN
	LANGUAGE plpgsql AS
$func$
BEGIN
	DELETE FROM projectTracing
	WHERE tracing_id::INTEGER = tracingid;
	RETURN FOUND;
END
$func$

/*****Update project tracing*****/
CREATE FUNCTION updateProjectTracing(
	p_date DATE,
	p_terrainType VARCHAR(64),
	p_reforestedArea DECIMAL,
	p_terrainElevation INT,
	p_ecosystem VARCHAR(64),
	p_reforestedSpecies VARCHAR(264),
	p_soilHumidity DECIMAL,
	p_soilDepth DECIMAL,
	p_notes VARCHAR(264),
	p_tracingid INT
)
	RETURNS BOOLEAN
	LANGUAGE plpgsql AS
$func$
BEGIN
	UPDATE projectTracing
	SET
		date=p_date,
		terrainType = p_terrainType,
		reforestedArea = p_reforestedArea,
		terrainElevation = p_terrainElevation,
		ecosystem = p_ecosystem,
		reforestedSpecies = p_reforestedSpecies,
		soilHumidity = p_soilHumidity,
		soilDepth = p_soilDepth,
		notes=p_notes
	WHERE
		tracing_id::INTEGER = p_tracingid;
	RETURN FOUND;
END
$func$;
/*select updateProjectTracing([params])*/


CREATE FUNCTION addInvader(
	name VARCHAR(64),
	type VARCHAR(8),
	status VARCHAR(64),
	controlStatus VARCHAR(64),
	affectation DECIMAL,
	notes VARCHAR(80),
	project_id INTEGER
)
	RETURNS BOOLEAN
	LANGUAGE plpgsql AS
$func$
	BEGIN
		INSERT INTO invaders(name,type,status,controlStatus,affectation,notes,project_id) VALUES (name,type,status,controlStatus,affectation,notes,project_id);
		RETURN FOUND;
	END
$func$;
/*SELECT addInvader('estedel2_1','Fauna','Identified','New','52.5','notas rferaerfndom',2)*/

CREATE FUNCTION getInvaders(projectid INTEGER)
	RETURNS TABLE("invader_id" INTEGER,"name" VARCHAR(64),"type" VARCHAR(8),status VARCHAR(64),controlstatus VARCHAR(64),affectation VARCHAR(64),"notes" VARCHAR(80),"project_id" INTEGER)
	LANGUAGE plpgsql AS
$func$
#variable_conflict use_column
BEGIN
	RETURN QUERY
	SELECT invader_id,name,type,status,controlStatus,affectation::VARCHAR(64),notes,project_id 
	FROM invaders
	WHERE project_id::INTEGER = projectid;
END
$func$
/*select * from getInvaders(<project_id>)*/

CREATE FUNCTION removeInvader(invaderID INTEGER)
	RETURNS BOOLEAN
	LANGUAGE plpgsql AS
$func$
BEGIN
	DELETE FROM invaders 
	WHERE invaders.invader_id=invaderID;
	RETURN FOUND;
END
$func$
/*select removeInvader(<invaderID>)*/

CREATE FUNCTION updateInvader(
	p_name VARCHAR(64),
	p_type VARCHAR(8),
	p_status VARCHAR(64),
	p_controlStatus VARCHAR(64),
	p_affectation DECIMAL,
	p_notes VARCHAR(80),
	p_invader_id INTEGER
)
	RETURNS BOOLEAN
	LANGUAGE plpgsql AS
$func$
BEGIN
	UPDATE invaders
	SET
		name=p_name,
		type=p_type,
		status=p_status,
		controlStatus=p_controlStatus,
		affectation=p_affectation,
		notes=p_notes
	WHERE
		invader_id = p_invader_id::INTEGER;
	RETURN FOUND;
END;
$func$
/*SELECT updateInvader(<params>) */


CREATE FUNCTION getInvaderTracing(projectTracingid INTEGER)
	RETURNS TABLE("invaderTracing_id" INTEGER ,"name" VARCHAR(64),"type" VARCHAR(8),"status" VARCHAR(64),"controlstatus" VARCHAR(64),"affectation" VARCHAR(64),"notes" VARCHAR(80),"projectTracing_id" INTEGER,"invader_id" INTEGER)
	LANGUAGE plpgsql AS
$func$
#variable_conflict use_column
BEGIN
	RETURN QUERY
	SELECT invaderTracing_id,name,type,status,controlStatus,affectation::VARCHAR(64),notes,projectTracing_id,invader_id
	FROM invaderTracing
	WHERE projectTracing_id::INTEGER=projectTracingid;
END;
$func$
/*select * from getInvaderTracing(2)*/

CREATE FUNCTION updateInvaderTracing(
	p_status VARCHAR(64),
	p_controlStatus VARCHAR(64),
	p_affectation DECIMAL,
	p_notes VARCHAR(80),
	p_invaderTracing_id INTEGER
)
	RETURNS BOOLEAN
	LANGUAGE plpgsql AS
$func$
BEGIN
	UPDATE invaderTracing
	SET
		status=p_status,
		controlStatus=p_controlStatus,
		affectation=p_affectation,
		notes=p_notes
	WHERE
		invaderTracing_id=p_invaderTracing_id::INTEGER;
	RETURN FOUND;
END;
$func$
/*select updateInvaderTracing(<params>)*/

CREATE FUNCTION insertInvaderTracing(
	p_name VARCHAR(64),
	p_type VARCHAR(8),
	p_status VARCHAR(64),
	p_controlStatus VARCHAR(64),
	p_affectation DECIMAL,
	p_notes VARCHAR(80),
	p_projectTracing_id INTEGER,
	p_invader_id INTEGER
)
	RETURNS BOOLEAN
	LANGUAGE plpgsql AS
$func$
BEGIN
	INSERT INTO invaderTracing(name,type,status,controlStatus,affectation,notes,projectTracing_id,invader_id)
	VALUES (p_name,p_type,p_status,p_controlStatus,p_affectation,p_notes,p_projectTracing_id,p_invader_id);
	RETURN FOUND;
END;
$func$
/*select insertInvaderTracing ('desdeDB','Flora','New','sinNOtes',2,6)*/